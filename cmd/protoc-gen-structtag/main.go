package main

import (
	"errors"
	"flag"

	"google.golang.org/protobuf/compiler/protogen"
)

var dbtag *string

func main() {
	var flags flag.FlagSet
	dbtag = flags.String("dbtag", "", "db tag to use for generated structs")

	options := protogen.Options{
		ParamFunc: flags.Set,
	}
	options.Run(func(gen *protogen.Plugin) error {
		if *dbtag == "" {
			gen.Error(errors.New("dbtag must be set"))
		}
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateStructTags(gen, f)

		}
		return nil
	})
}

func generateStructTags(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_structtags.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-structtags. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	for _, message := range file.Messages {
		g.P("type ", message.GoIdent, " struct {")
		for _, field := range message.Fields {
			g.P(field.GoName, " ", field.Desc.Kind(), " `json:\"", field.Desc.Name(), "\" ", *dbtag, ":\"", field.Desc.Name(), "\"`")
		}
		g.P("}")
	}

	return g
}
